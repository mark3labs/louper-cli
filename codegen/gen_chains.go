//go:build ignore
// +build ignore

package main

import (
	"encoding/json"
	"log"
	"os"
	"text/template"

	"github.com/mark3labs/louper-cli/types"
)

func main() {
	// open file
	f, err := os.Create("./constants/chains_generated.go")
	if err != nil {
		log.Println("create file: ", err)
		return
	}

	t := template.Must(template.New("").
		Parse(`// Code generated by go generate. DO NOT EDIT.
package constants

var ChainNamesToID = map[string]uint64{
  {{ range $k, $v := . }}"{{ $k }}": {{ $v.ID }},
  {{ end }}
}

var ChainIdsToName = map[uint64]string{
  {{ range $k, $v := . }}{{ $v.ID }}: "{{ $k }}",
  {{ end }}
}

var RPCUrls = map[string]string{
  {{ range $k, $v := . }}"{{ $k }}": "{{ index $v.RPCUrls.Default.HTTP 0 }}",
  {{ end }}
}`))

	file, err := os.Open("./codegen/chains.json") // the file you want to read
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	var chains types.Chains

	err = json.NewDecoder(file).Decode(&chains)
	if err != nil {
		log.Fatal(err)
	}

	chains = filterKeys(
		chains,
		"zksync",
		"zksyncSepoliaTestnet",
		"klaytn",
		"klaytnBaobab",
	)

	// assign a value to the placeholder and write to file
	err = t.Execute(f, chains)
	if err != nil {
		log.Print("execute: ", err)
		return
	}

	f.Close()
}

func filterKeys(
	m map[string]types.Chain,
	keys ...string,
) map[string]types.Chain {
	for _, key := range keys {
		delete(m, key)
	}
	return m
}
